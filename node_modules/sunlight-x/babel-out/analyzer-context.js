"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnalyzerContext = undefined;

var _arrayWalker = require("./array-walker.js");

var _constants = require("./constants.js");

var _jsdom = require("./jsdom.js");

var _userDefinedNameStore = require("./user-defined-name-store.js");

class AnalyzerContext {
  // Uninitizlized by constructor. Managed by highlighter.js.

  constructor(parserContext, userDefinedNameStore, partialContext, options) {
    this.nodes = [];
    this.userDefinedNameStore = userDefinedNameStore;
    this.options = options;

    if (options.showWhitespace) {
      this.nbsp = "\u00b7";
      this.tab = new Array(this.options.tabWidth).join("\u2014") + "\u2192";
    } else {
      this.nbsp = "\u00a0";
      this.tab = new Array(this.options.tabWidth + 1).join(this.nbsp);
    }

    // this.tokens = (partialContext ? partialContext.tokens : []).concat(parserContext.getAllTokens());
    this.tokens = (partialContext && partialContext.tokens || []).concat(parserContext.getAllTokens());
    this.analyzerOverrides = [];
    this.continuation = parserContext.continuation;
    this.items = parserContext.items;
  } // Uninitizlized by constructor. Initialize before using!


  _prepareText(token) {
    var value = token.value.split(" ").join(this.nbsp);

    // tabstop madness: replace \t with the appropriate number of characters,
    // depending on the tabWidth option and its relative position in the line
    var tabIndex = void 0;
    while ((tabIndex = value.indexOf("\t")) >= 0) {
      var lastNewlineColumn = value.lastIndexOf(_constants.EOL, tabIndex);
      var actualColumn = lastNewlineColumn >= 0 ? tabIndex - lastNewlineColumn - 1 : tabIndex;
      var tabLength = this.options.tabWidth - actualColumn % this.options.tabWidth; // actual length of the TAB character

      value = value.substring(0, tabIndex) + this.tab.substring(this.options.tabWidth - tabLength) + value.substring(tabIndex + 1);
    }
    return value;
  }

  // Create a token walker that is positioned at the this.index.
  getTokenWalker() {
    return new _arrayWalker.ArrayWalker(this.tokens, this.index);
  }

  addNode(node) {
    this.nodes.push(node);
  }

  createTextNode(token) {
    return _jsdom.document.createTextNode(this._prepareText(token));
  }

  getNodes() {
    return this.nodes;
  }

  resetNodes() {
    this.nodes = [];
  }
}
exports.AnalyzerContext = AnalyzerContext;