"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.caseInsensitive = exports.customParseRules = exports.customTokens = exports.identAfterFirstLetter = exports.identFirstLetter = exports.operators = exports.scopes = exports.keywords = exports.name = undefined;
exports.numberParser = numberParser;

var _util = require("../util.js");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var name = exports.name = "6502asm"; // sunlight-x: Intelligent Syntax Highlighting, Modernized
// Copyright 2017 Leung Wing-chung. All rights reserved.
// Use of this source code is governed by a Apache License Version 2.0, that can
// be found in the LICENSE file.

var keywords = exports.keywords = [
// conditional branch ops
"BCC", "BCS", "BEQ", "BMI", "BNE", "BPL", "BVC", "BVS",
// comparison ops
"CMP", "CPX", "CPY",
// flag ops
"CLC", "CLD", "CLI", "CLV", "SEC", "SED", "SEI",
// register ops
"DEX", "DEY", "INX", "INY", "TAX", "TAY", "TXA", "TYA",
// regular ops
"BRK", "NOP", "RTI", "RTS", "ASL", "LSR", "ROL", "ROR", "ADC", "AND", "BIT", "DEC", "EOR", "INC", "JMP", "JSR", "LDA", "LDX", "LDY", "ORA", "SBC", "STA", "STX", "STY",
// stack ops
"PHA", "PHP", "PLA", "PLP", "TSX", "TXS"];

var scopes = exports.scopes = {
  string: [['"', '"', [], false]],
  comment: [[";", "\n", [], true]]
};

var operators = exports.operators = [">>", "<<", ">=", "<=", "==", "!=", "&&", "||", "~", "-", "<", ">", "*", "/", "%", "+", "-", "=", "&", "^", "|", "?"];

var identFirstLetter = exports.identFirstLetter = /[A-Za-z]/; // must be alpha
var identAfterFirstLetter = exports.identAfterFirstLetter = /\w/; // alphanumeric and underscore

var customTokens = exports.customTokens = {
  illegalOpcode: {
    values: [
    // illegal ops
    "SLO", "RLA", "SRE", "RRA", "SAX", "LAX", "DCP", "ISC", "ANC", "ALR", "ARR", "XAA", "AXS", "AHX", "SHY", "SHX", "TAS", "LAS"],
    boundary: "\\b"
  },

  pseudoOp: {
    values: [
    // pre-processor pseudo-ops (not a complete list!)
    "BYTE", "WORD", "DS", "ORG", "RORG", "ALIGN", "MAC", "ENDM", "SUBROUTINE"],
    boundary: "\\b"
  }
};

var customParseRules = exports.customParseRules = [function (context) {
  if (!context.reader.match("#")) return null;

  // Quick and dirty: everything between "#" (inclusive) and whitespace
  // (exclusive) is a constant too dirty.  Need to account for parens and
  // square brackets, whitespace can appear inside them. New routine: once
  // inside () or [], anything goes, but once outside, terminate with
  // whitespace
  var value = context.reader.read();
  var parenCount = 0;
  var bracketCount = 0;
  for (;;) {
    var peek = context.reader.peek();
    if (parenCount === 0 && bracketCount === 0 && /\s/.test(peek)) break;

    if (peek === ")" && parenCount > 0) parenCount--;
    if (peek === "]" && bracketCount > 0) bracketCount--;
    if (peek === "(") parenCount++;
    if (peek === "[") bracketCount++;

    value += context.reader.read();
  }

  return context.createToken("constant", value);
},

// labels
function () {
  var validLabelOps = ["BCC", "BCS", "BEQ", "BMI", "BNE", "BPL", "BVC", "BVS", "JMP", "JSR"];

  return function (context) {
    if (!/[A-Za-z]/.test(context.reader.peek())) return null;

    var prevToken = util.getPreviousNonWsToken(context.getAllTokens(), context.count());

    // Check if it is just a regular ident.
    if ((!prevToken || prevToken.name !== "keyword" || !util.contains(validLabelOps, prevToken.value, true)) && context.count() > 0 && !/\n$/.test(context.defaultData.text)) return null;

    // Read until the end of the ident.
    var label = context.reader.read();
    while (!context.reader.isEOF() && /\w/.test(context.reader.peek())) {
      label += context.reader.read();
    }return context.createToken("label", label);
  };
}()];

var caseInsensitive = exports.caseInsensitive = true;

/**
 * Number parser of 6502asm.
 * TODO: parsing appears to be incorrect. But needs specs before fixing.
 * @param {ParserContext} context
 * @returns {Token?}
 */
function numberParser(context) {
  var current = context.reader.peek();

  var number = void 0;
  // is first char a digit?
  if (!/\d/.test(current)) {
    // does it start with "$" (hex) or "%" (binary)?
    if (current !== "$" && current !== "%") return null;

    // hex/binary number
    number = context.reader.read(2);
  } else {
    number = context.reader.read(1);
    // is it a decimal?
    if (context.reader.peek() === ".") number += context.reader.read();
  }

  // easy way out: read until it's not a number or letter a-f
  // this will work for hex ($FF), octal (012), decimal and binary
  while (!context.reader.isEOF() && /[A-Fa-f0-9]/.test(context.reader.peek())) {
    number += context.reader.read();
  }return context.createToken("number", number);
}