"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// sunlight-x: Intelligent Syntax Highlighting, Modernized
// Copyright 2017 Leung Wing-chung. All rights reserved.
// Use of this source code is governed by a Apache License Version 2.0, that can
// be found in the LICENSE file.

class ArrayWalker {
  constructor(arr) {
    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this._data = arr;
    this.index = index;
  }

  // Duplicate the array walker with the current state.
  duplicate() {
    return new ArrayWalker(this._data, this.index);
  }

  // Gets the current item, with bounds checking.
  current() {
    if (this.index < 0 || this.index >= this._data.length) throw new Error(`Invalid index ${this.index}. The array has ${this._data.length} elements.`);
    return this._data[this.index];
  }

  // Note: hasPrev and hasNext does not detect empty items nor undefined. The
  // former is impossible anyway.
  hasPrev() {
    return this.index > 0;
  }
  hasNext() {
    return this.index < this._data.length - 1;
  }

  // Increase or decrease index, and load the value with bounds check.
  prev() {
    this.index--;
    return this.current();
  }
  next() {
    this.index++;
    return this.current();
  }

  // Increase or decrease index, and load the value without bounds check.
  prevUnsafe() {
    this.index--;
    return this._data[this.index];
  }
  nextUnsafe() {
    this.index++;
    return this._data[this.index];
  }

  // Increase or decrease index.
  increaseIndex() {
    this.index++;
  }
  decreaseIndex() {
    this.index--;
  }

  // Random access relative to the current index.
  hasOffset(offset) {
    var index = this.index + offset;
    return index >= 0 && index < this._data.length;
  }

  peek(offset) {
    var index = this.index + offset;
    if (index < 0 || index >= this._data.length) throw new Error(`Invalid index ${index}. The array has ${this._data.length} elements.`);
    return this._data[this.index + offset];
  }

  peekUnsafe(offset) {
    return this._data[this.index + offset];
  }
}
exports.ArrayWalker = ArrayWalker;