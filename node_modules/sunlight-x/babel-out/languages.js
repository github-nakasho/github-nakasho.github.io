"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.languages = undefined;
exports.createHashMap = createHashMap;
exports.registerLanguage = registerLanguage;
exports.isRegistered = isRegistered;

var _util = require("./util.js");

var _defaultHelpers = require("./default-helpers.js");

// sunlight-x: Intelligent Syntax Highlighting, Modernized
// Copyright 2017 Leung Wing-chung. All rights reserved.
// Use of this source code is governed by a Apache License Version 2.0, that can
// be found in the LICENSE file.

var languages = exports.languages = {};

/**
 * Creates a hash map from the given array. This is crucial for performance.
 *
 * @param {string[]} wordMap An array of strings to hash.
 * @param {string} boundary A regular expression representing the boundary of
 *                          each string (e.g. "\\b")
 * @param {boolean|undefined} caseInsensitive Indicates if the words are case
 *                            insensitive (defaults to false)
 * @returns {Object} Each string in the array is hashed by its first letter. The
 *                   value is transformed into an object with properties value
 *                   (the original value) and a regular expression to match the
 *                   word.
 */
function createHashMap(wordMap, boundary) {
  var caseInsensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  // creates a hash table where the hash is the first character of the word
  var newMap = {};
  for (var i = 0; i < wordMap.length; i++) {
    var word = caseInsensitive ? wordMap[i].toUpperCase() : wordMap[i];
    var firstChar = word.charAt(0);
    if (!newMap[firstChar]) newMap[firstChar] = [];

    newMap[firstChar].push({
      value: word,
      // TODO: rewrite expression once Flow issue #4435 is fixed.
      regex: caseInsensitive ? new RegExp("^" + (0, _util.regexEscape)(word) + boundary, "i") : new RegExp("^" + (0, _util.regexEscape)(word) + boundary)
    });
  }

  return newMap;
}

/**
 * Register a language to the highlighter.
 * @param {Object} languageData
 */
function registerLanguage(languageData) {
  var parsedLanguage = {
    analyzer: languageData.analyzer || new _defaultHelpers.defaultAnalyzer(),
    caseInsensitive: languageData.caseInsensitive || false,
    contextItems: languageData.contextItems || {},
    customParseRules: languageData.customParseRules || [],
    customTokens: {}, // initializer later
    doNotParse: languageData.doNotParse || /\s/,
    embeddedLanguages: [],
    identAfterFirstLetter: languageData.identAfterFirstLetter || /(?!x)x/,
    identFirstLetter: languageData.identFirstLetter || /(?!x)x/,
    keywords: {}, // initializer later
    name: languageData.name || "",
    namedIdentRules: languageData.namedIdentRules && {
      follows: languageData.namedIdentRules.follows || [],
      precedes: languageData.namedIdentRules.precedes || [],
      between: languageData.namedIdentRules.between || [],
      custom: languageData.namedIdentRules.custom || []
    } || { follows: [], precedes: [], between: [], custom: [] },
    numberParser: languageData.numberParser || _defaultHelpers.defaultNumberParser,
    operators: {}, // initializer later
    punctuation: languageData.punctuation || /[^\w\s]/,
    scopes: languageData.scopes || {}
  };
  // Transform keywords, operators and custom tokens into a hash map.
  parsedLanguage.keywords = createHashMap(languageData.keywords || [], "\\b", languageData.caseInsensitive);

  parsedLanguage.operators = createHashMap(languageData.operators || [], "", languageData.caseInsensitive);

  for (var tokenName in languageData.customTokens) {
    parsedLanguage.customTokens[tokenName] = createHashMap(languageData.customTokens[tokenName].values ? languageData.customTokens[tokenName].values : [], languageData.customTokens[tokenName].boundary, languageData.caseInsensitive);
  } // Convert the embedded language object to an easier-to-use array.
  var embeddedLanguages = [];
  for (var languageName in languageData.embeddedLanguages) {
    embeddedLanguages.push({
      parentLanguage: languageData.name || "",
      language: languageName,
      switchTo: languageData.embeddedLanguages[languageName].switchTo,
      switchBack: languageData.embeddedLanguages[languageName].switchBack,
      oldItems: {}
    });
  }parsedLanguage.embeddedLanguages = embeddedLanguages;

  languages[parsedLanguage.name] = parsedLanguage;
}

/**
 * Query if an language is registered to the highlighter.
 * @param {string} languageId
 * @returns {boolean}
 */
function isRegistered(languageId) {
  return languages[languageId] !== undefined;
}