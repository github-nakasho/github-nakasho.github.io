I"h4
<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#rusanov法" id="markdown-toc-rusanov法">Rusanov法</a>    <ol>
      <li><a href="#流束計算" id="markdown-toc-流束計算">流束計算</a></li>
      <li><a href="#rusanov流束の計算モジュール" id="markdown-toc-rusanov流束の計算モジュール">Rusanov流束の計算モジュール</a></li>
    </ol>
  </li>
</ol>

</details>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9131160172347693" crossorigin="anonymous"></script>

<!-- for_jekyll -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9131160172347693" data-ad-slot="3528582902" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h1 id="rusanov法">Rusanov法</h1>

<p>ここでは(磁気)流体力学の計算手法であるRusanov法についての勉強メモを記述しています。</p>

<h2 id="流束計算">流束計算</h2>

<p>実はとても簡単です。<a href="/simulation/hll">HLL法</a>において、\(S_R = S_\mathrm{max}, S_L = -S_\mathrm{max}\)のようにしたものがRusanov流束になります。すなわち</p>

\[\mathbf{F}^\ast 
= \frac{S_\mathrm{max} \mathbf{F}_L + S_\mathrm{max} \mathbf{F}_R - S_\mathrm{max}^2 (\mathbf{U}_R - \mathbf{U}_L)}{2 S_\mathrm{max}} 
= \frac{1}{2} \left\{ \mathbf{F}_R + \mathbf{F}_L - S_\mathrm{max} (\mathbf{U}_R - \mathbf{U}_L)\right\}\tag{1}\]

<p>左側と右側の流束を平均したような形になります。これは\(S_R = -S_L\)としていることからわかるように、左側に進む波と右側に進む波の速度を区別しません。これにより流束計算が非常に簡単かつ、実際に数値計算をした際にも高速に実行することができます。</p>

<p><img src="/assets/images/simulation/rusanov_01.png" alt="" /></p>

<p>もちろん欠点も存在します。その流束計算方法から、左右どちらかに進行する速進衝撃波は捉えることができますが、それ以外の構造は捉えることができません。すなわち接触不連続面などは上手に分解できず、鈍った結果となります。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>複雑な流体構造により計算が停止するような場合には、まずRusanov法などの解像度の低い手法を試してみると良いかも？
とりあえず計算が途中で停止せず、動かせはするはずです。
</code></pre></div></div>

<h2 id="rusanov流束の計算モジュール">Rusanov流束の計算モジュール</h2>

<p>以下にRusanov流束計算コードのJulia実装例を示します。</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">LinearAlgebra</span>    
<span class="n">include</span><span class="x">(</span><span class="s">"../convert/convert.jl"</span><span class="x">)</span>
<span class="n">include</span><span class="x">(</span><span class="s">"../const/const.jl"</span><span class="x">)</span>
<span class="k">function</span><span class="nf"> hll!</span><span class="x">(</span><span class="n">F</span><span class="o">::</span><span class="kt">Array</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="mi">2</span><span class="x">},</span> <span class="n">Vl</span><span class="o">::</span><span class="kt">Array</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="mi">2</span><span class="x">},</span> <span class="n">Vr</span><span class="o">::</span><span class="kt">Array</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="mi">2</span><span class="x">},</span> <span class="n">nxmax</span><span class="o">::</span><span class="kt">Int64</span><span class="x">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">nxmax</span><span class="o">-</span><span class="mi">1</span>
        <span class="c"># compute B * B of left side</span>
        <span class="n">bl2</span> <span class="o">=</span> <span class="n">dot</span><span class="x">(</span><span class="n">Vl</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">Vl</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># compute v * B of left side</span>
        <span class="n">vlbl</span> <span class="o">=</span> <span class="n">dot</span><span class="x">(</span><span class="n">Vl</span><span class="x">[</span><span class="mi">2</span><span class="o">:</span><span class="mi">4</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">Vl</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># convert Vl ---&gt; Ul</span>
        <span class="n">Ul</span> <span class="o">=</span> <span class="n">Convert</span><span class="o">.</span><span class="n">v_to_u</span><span class="x">(</span><span class="n">Vl</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># convert Ul, VL ---&gt; Fl</span>
        <span class="n">Fl</span> <span class="o">=</span> <span class="n">Convert</span><span class="o">.</span><span class="n">uv_to_f</span><span class="x">(</span><span class="n">Ul</span><span class="x">,</span> <span class="n">Vl</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">bl2</span><span class="x">,</span> <span class="n">vlbl</span><span class="x">)</span>
        <span class="c"># compute fast-mode speed of left side</span>
        <span class="n">gmprl</span> <span class="o">=</span> <span class="n">gm</span> <span class="o">*</span> <span class="n">Vl</span><span class="x">[</span><span class="mi">5</span><span class="x">,</span> <span class="n">i</span><span class="x">]</span>
        <span class="n">vfl</span> <span class="o">=</span> <span class="n">sqrt</span><span class="x">(((</span><span class="n">bl2</span><span class="o">+</span><span class="n">gmprl</span><span class="x">)</span><span class="o">+</span><span class="n">sqrt</span><span class="x">((</span><span class="n">bl2</span><span class="o">+</span><span class="n">gmprl</span><span class="x">)</span><span class="o">^</span><span class="mi">2</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="n">gmprl</span><span class="o">*</span><span class="n">Vl</span><span class="x">[</span><span class="mi">6</span><span class="x">,</span> <span class="n">i</span><span class="x">]</span><span class="o">^</span><span class="mi">2</span><span class="x">))</span><span class="o">/</span><span class="x">(</span><span class="mi">2</span><span class="o">*</span><span class="n">Vl</span><span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="n">i</span><span class="x">]))</span>
        <span class="c"># compute B * B of right side</span>
        <span class="n">br2</span> <span class="o">=</span> <span class="n">dot</span><span class="x">(</span><span class="n">Vr</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">Vr</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># compute v * B of right side</span>
        <span class="n">vrbr</span> <span class="o">=</span> <span class="n">dot</span><span class="x">(</span><span class="n">Vr</span><span class="x">[</span><span class="mi">2</span><span class="o">:</span><span class="mi">4</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">Vr</span><span class="x">[</span><span class="mi">6</span><span class="o">:</span><span class="mi">8</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># convert Vr ---&gt; Ur</span>
        <span class="n">Ur</span> <span class="o">=</span> <span class="n">Convert</span><span class="o">.</span><span class="n">v_to_u</span><span class="x">(</span><span class="n">Vr</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span>
        <span class="c"># convert Ur, Vr ---&gt; Fr</span>
        <span class="n">Fr</span> <span class="o">=</span> <span class="n">Convert</span><span class="o">.</span><span class="n">uv_to_f</span><span class="x">(</span><span class="n">Ur</span><span class="x">,</span> <span class="n">Vr</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">br2</span><span class="x">,</span> <span class="n">vrbr</span><span class="x">)</span>
        <span class="c"># compute fast-mode speed of right side</span>
        <span class="n">gmprr</span> <span class="o">=</span> <span class="n">gm</span> <span class="o">*</span> <span class="n">Vr</span><span class="x">[</span><span class="mi">5</span><span class="x">,</span> <span class="n">i</span><span class="x">]</span>
        <span class="n">vfr</span> <span class="o">=</span> <span class="n">sqrt</span><span class="x">(((</span><span class="n">br2</span><span class="o">+</span><span class="n">gmprr</span><span class="x">)</span><span class="o">+</span><span class="n">sqrt</span><span class="x">((</span><span class="n">br2</span><span class="o">+</span><span class="n">gmprr</span><span class="x">)</span><span class="o">^</span><span class="mi">2</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="n">gmprr</span><span class="o">*</span><span class="n">Vr</span><span class="x">[</span><span class="mi">6</span><span class="x">,</span> <span class="n">i</span><span class="x">]</span><span class="o">^</span><span class="mi">2</span><span class="x">))</span><span class="o">/</span><span class="x">(</span><span class="mi">2</span><span class="o">*</span><span class="n">Vr</span><span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="n">i</span><span class="x">]))</span>
        <span class="c"># compute smax</span>
        <span class="n">smax</span> <span class="o">=</span> <span class="n">max</span><span class="x">(</span><span class="n">Vl</span><span class="x">[</span><span class="mi">2</span><span class="x">,</span> <span class="n">i</span><span class="x">],</span> <span class="n">Vr</span><span class="x">[</span><span class="mi">2</span><span class="x">,</span> <span class="n">i</span><span class="x">])</span><span class="o">+</span><span class="n">max</span><span class="x">(</span><span class="n">vfl</span><span class="x">,</span> <span class="n">vfr</span><span class="x">)</span>
        <span class="c"># compute Rusanov flux</span>
        <span class="k">for</span> <span class="n">m</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">8</span>
            <span class="n">F</span><span class="x">[</span><span class="n">m</span><span class="x">,</span> <span class="n">i</span><span class="x">]</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="x">(</span><span class="n">Fr</span><span class="x">[</span><span class="n">m</span><span class="x">]</span><span class="o">+</span><span class="n">Fl</span><span class="x">[</span><span class="n">m</span><span class="x">]</span><span class="o">-</span><span class="n">smax</span><span class="o">*</span><span class="x">(</span><span class="n">Ur</span><span class="x">[</span><span class="n">m</span><span class="x">]</span><span class="o">-</span><span class="n">Ul</span><span class="x">[</span><span class="n">m</span><span class="x">]))</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><a href="/simulation/hll">HLL</a>の計算方法と特に変わりはありません。</p>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9131160172347693" crossorigin="anonymous"></script>

<!-- for_jekyll -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9131160172347693" data-ad-slot="3528582902" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

:ET