"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCSSSync = exports.Highlighter = exports.isRegistered = exports.registerLanguage = exports.globalOptions = exports.defaultAnalyzer = undefined;

var _defaultHelpers = require("./default-helpers.js");

Object.defineProperty(exports, "defaultAnalyzer", {
  enumerable: true,
  get: function get() {
    return _defaultHelpers.defaultAnalyzer;
  }
});

var _globalOptions = require("./globalOptions.js");

Object.defineProperty(exports, "globalOptions", {
  enumerable: true,
  get: function get() {
    return _globalOptions.globalOptions;
  }
});

var _languages = require("./languages.js");

Object.defineProperty(exports, "registerLanguage", {
  enumerable: true,
  get: function get() {
    return _languages.registerLanguage;
  }
});
Object.defineProperty(exports, "isRegistered", {
  enumerable: true,
  get: function get() {
    return _languages.isRegistered;
  }
});

var _styles = require("./styles.js");

Object.defineProperty(exports, "getCSSSync", {
  enumerable: true,
  get: function get() {
    return _styles.getCSSSync;
  }
});
exports.highlightAll = highlightAll;

var _highlighter = require("./highlighter.js");

var _registerLanguages = require("./register-languages.js");

require("./load-plugins.js");

exports.Highlighter = _highlighter.Highlighter;


/**
 * Highlight all code matching the given or default class prefix.
 * @param {SunlightPartialOptionsType} options
 */
function highlightAll(options) {
  var highlighter = new _highlighter.Highlighter(options);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = highlighter.getAllHighlightableNodes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var node = _step.value;

      highlighter.highlightNode(node);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

// Highlighter initialization
(0, _registerLanguages.registerLanguages)();