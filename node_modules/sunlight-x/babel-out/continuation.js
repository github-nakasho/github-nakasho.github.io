"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Continuation = undefined;

var _util = require("./util.js");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// TODO: rename the class to something more descriptive.
class Continuation {

  constructor(scope, tokenName) {
    this.escapeSequences = scope[2] || [];
    this.closerLength = scope[1].length;
    this.closer = typeof scope[1] === "string" ? new RegExp(util.regexEscape(scope[1])) : scope[1].regex;
    this.zeroWidth = scope[3] || false;
    this.tokenName = tokenName;
  }

  process(context, continuation, buffer) {
    var foundCloser = false;

    while (!context.reader.isEOF()) {
      var foundEscapeSequence = false;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.escapeSequences[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var escapeSequence = _step.value;

          if (context.reader.peek(escapeSequence.length) === escapeSequence) {
            buffer += context.reader.read(escapeSequence.length);
            foundEscapeSequence = true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (foundEscapeSequence) continue;

      var peekValue = context.reader.peek(this.closerLength);
      if (this.closer.test(peekValue)) {
        foundCloser = true;
        break;
      }

      buffer += context.reader.read();
    }

    // TODO: Untested on multi-language settings. Probably buggy.
    if (foundCloser) {
      if (!this.zeroWidth && !context.reader.isEOF()) buffer += context.reader.read(this.closerLength);
    } else {
      // This scope is not closed. We are now at EOF, and will continue with the
      // scope in the next partial parse.
      context.continuation = continuation;
    }

    return context.createToken(this.tokenName, buffer);
  }
}
exports.Continuation = Continuation;