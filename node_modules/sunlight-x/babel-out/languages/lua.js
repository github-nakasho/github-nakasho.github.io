"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.operators = exports.namedIdentRules = exports.identAfterFirstLetter = exports.identFirstLetter = exports.customParseRules = exports.customTokens = exports.scopes = exports.keywords = exports.name = undefined;

var _util = require("../util.js");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var name = exports.name = "lua"; // sunlight-x: Intelligent Syntax Highlighting, Modernized
// Copyright 2017 Leung Wing-chung. All rights reserved.
// Use of this source code is governed by a Apache License Version 2.0, that can
// be found in the LICENSE file.

var keywords = exports.keywords = ["and", "break", "do", "elseif", "else", "end", "false", "for", "function", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"];

var scopes = exports.scopes = {
  string: [['"', '"', ['\\"', "\\\\"], false], ["'", "'", ["\\'", "\\\\"], false]],
  comment: [["--[[", "]]", [], false], ["--", "\n", [], true]]
};

var customTokens = exports.customTokens = {
  globalVariable: {
    values: ["_G", "_VERSION"],
    boundary: "\\b"
  }
};

var customParseRules = exports.customParseRules = [
// standard functions
function () {
  var functions = util.createHashMap(["assert", "collectgarbage", "dofile", "error", "getfenv", "getmetatable", "ipairs", "load", "loadfile", "loadstring", "next", "pairs", "pcall", "print", "rawequal", "rawget", "rawset", "select", "setfenv", "setmetatable", "tonumber", "tostring", "type", "unpack", "xpcall",

  // exported from package library
  "module", "require"], "\\b");

  return function (context) {
    var walker = context.getTokenWalker();
    if (walker.hasPrev()) {
      var prevToken = walker.prev();
      // Reject if the token is part of a package
      if (prevToken.name === "operator" && prevToken.value === ".") return null;
    }

    return util.matchWord(context, functions, "function");
  };
}(),

// file functions
function () {
  var functions = util.createHashMap(["close", "flush", "lines", "read", "seek", "setvbuf", "write"], "\\b");

  return function (context) {
    var walker = context.getTokenWalker();
    if (!walker.hasPrev()) return null;

    var prevToken = walker.prev();
    // Reject if the token is not a function on file
    if (prevToken.name !== "operator" || prevToken.value !== ":") return null;

    return util.matchWord(context, functions, "function");
  };
}(),

// literal strings
function (context) {
  // [=*[ string contents ]=*]
  if (context.reader.peek() !== "[") return null;

  var offset = void 0;
  for (offset = 1;; offset++) {
    var peek = context.reader.peekWithOffset(offset);
    if (peek !== "=") {
      if (peek !== "[") return null;
      break;
    }
  }
  var numberOfEqualsSigns = offset - 1;

  var value = context.reader.read(offset + 1);

  // read until "]" + numberOfEqualsSigns + "]"
  var closer = "]" + new Array(numberOfEqualsSigns + 1).join("=") + "]";
  while (!context.reader.isEOF()) {
    if (context.reader.match(closer)) {
      value += context.reader.read(closer.length);
      break;
    }
    value += context.reader.read();
  }

  return context.createToken("verbatimString", value);
}];

var identFirstLetter = exports.identFirstLetter = /[A-Za-z_]/;
var identAfterFirstLetter = exports.identAfterFirstLetter = /\w/;

var namedIdentRules = exports.namedIdentRules = {
  custom: [function () {
    var tables = ["coroutine", "package", "string", "table", "math", "io", "os", "debug"];

    return function (context) {
      if (!util.contains(tables, context.tokens[context.index].value)) return false;

      var nextToken = util.getNextNonWsToken(context.tokens, context.index);
      return !!nextToken && (nextToken.name !== "operator" || nextToken.value !== ":");
    };
  }()],

  follows: [[{ token: "keyword", values: ["function"] }, { token: "default" }]]
};

var operators = exports.operators = ["+", "-", "*", "/", "%", "^", "#", "==", "~=", "=", "<=", "<", ">=", ">", ":", "...", "..", "."];