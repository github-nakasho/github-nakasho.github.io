"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerLanguages = registerLanguages;

var _languages = require("./languages.js");

var _actionscript = require("./languages/actionscript.js");

var actionscript = _interopRequireWildcard(_actionscript);

var _asm = require("./languages/6502asm.js");

var asm6502 = _interopRequireWildcard(_asm);

var _bash = require("./languages/bash.js");

var bash = _interopRequireWildcard(_bash);

var _batch = require("./languages/batch.js");

var batch = _interopRequireWildcard(_batch);

var _brainfuck = require("./languages/brainfuck.js");

var brainfuck = _interopRequireWildcard(_brainfuck);

var _cpp = require("./languages/cpp.js");

var cpp = _interopRequireWildcard(_cpp);

var _csharp = require("./languages/csharp.js");

var csharp = _interopRequireWildcard(_csharp);

var _css = require("./languages/css.js");

var css = _interopRequireWildcard(_css);

var _diff = require("./languages/diff.js");

var diff = _interopRequireWildcard(_diff);

var _erlang = require("./languages/erlang.js");

var erlang = _interopRequireWildcard(_erlang);

var _haskell = require("./languages/haskell.js");

var haskell = _interopRequireWildcard(_haskell);

var _httpd = require("./languages/httpd.js");

var httpd = _interopRequireWildcard(_httpd);

var _java = require("./languages/java.js");

var java = _interopRequireWildcard(_java);

var _javascript = require("./languages/javascript.js");

var javascript = _interopRequireWildcard(_javascript);

var _lisp = require("./languages/lisp.js");

var lisp = _interopRequireWildcard(_lisp);

var _lua = require("./languages/lua.js");

var lua = _interopRequireWildcard(_lua);

var _mysql = require("./languages/mysql.js");

var mysql = _interopRequireWildcard(_mysql);

var _nginx = require("./languages/nginx.js");

var nginx = _interopRequireWildcard(_nginx);

var _objectiveC = require("./languages/objective-c.js");

var objectivec = _interopRequireWildcard(_objectiveC);

var _perl = require("./languages/perl.js");

var perl = _interopRequireWildcard(_perl);

var _php = require("./languages/php.js");

var php = _interopRequireWildcard(_php);

var _plaintext = require("./languages/plaintext.js");

var plaintext = _interopRequireWildcard(_plaintext);

var _powershell = require("./languages/powershell.js");

var powershell = _interopRequireWildcard(_powershell);

var _python = require("./languages/python.js");

var python = _interopRequireWildcard(_python);

var _ruby = require("./languages/ruby.js");

var ruby = _interopRequireWildcard(_ruby);

var _scala = require("./languages/scala.js");

var scala = _interopRequireWildcard(_scala);

var _sln = require("./languages/sln.js");

var sln = _interopRequireWildcard(_sln);

var _tsql = require("./languages/tsql.js");

var tsql = _interopRequireWildcard(_tsql);

var _vb = require("./languages/vb.js");

var vb = _interopRequireWildcard(_vb);

var _xml = require("./languages/xml.js");

var xml = _interopRequireWildcard(_xml);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var languages = [actionscript, asm6502, bash, batch, brainfuck, cpp, csharp, css, diff, erlang, haskell, httpd, java, javascript, lisp, lua, mysql, nginx, objectivec, perl, php, plaintext, powershell, python, ruby, scala, sln, tsql, vb, xml];

/**
 * Register the languages into Sunlight-X highlighter.
 */
// sunlight-x: Intelligent Syntax Highlighting, Modernized
// Copyright 2017 Leung Wing-chung. All rights reserved.
// Use of this source code is governed by a Apache License Version 2.0, that can
// be found in the LICENSE file.

function registerLanguages() {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var language = _step.value;
      (0, _languages.registerLanguage)(language);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}