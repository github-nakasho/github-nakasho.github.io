I"n<
<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#m1-macでjekyll環境を設定からgithub-pagesに自作websiteをuploadするまで" id="markdown-toc-m1-macでjekyll環境を設定からgithub-pagesに自作websiteをuploadするまで">M1 MacでJekyll環境を設定からGitHub Pagesに自作websiteをuploadするまで</a>    <ol>
      <li><a href="#jekyll環境構築" id="markdown-toc-jekyll環境構築">Jekyll環境構築</a>        <ol>
          <li><a href="#xcodeのインストール" id="markdown-toc-xcodeのインストール">Xcodeのインストール</a></li>
          <li><a href="#homebrewのインストール" id="markdown-toc-homebrewのインストール">Homebrewのインストール</a></li>
          <li><a href="#ruby-rbenvのインストール" id="markdown-toc-ruby-rbenvのインストール">Ruby, Rbenvのインストール</a></li>
          <li><a href="#jekyllのインストール" id="markdown-toc-jekyllのインストール">Jekyllのインストール</a></li>
          <li><a href="#m1-macへの処方箋-jekyllの修正" id="markdown-toc-m1-macへの処方箋-jekyllの修正">M1 Macへの処方箋: Jekyllの修正</a></li>
        </ol>
      </li>
      <li><a href="#github-pagesにアップロードする" id="markdown-toc-github-pagesにアップロードする">GitHub Pagesにアップロードする</a>        <ol>
          <li><a href="#_configyml" id="markdown-toc-_configyml">_config.yml</a></li>
          <li><a href="#actionのセットアップ" id="markdown-toc-actionのセットアップ">Actionのセットアップ</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#参考リンク" id="markdown-toc-参考リンク">参考リンク</a></li>
</ol>

</details>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9131160172347693" crossorigin="anonymous"></script>

<!-- for_jekyll -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9131160172347693" data-ad-slot="3528582902" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h1 id="m1-macでjekyll環境を設定からgithub-pagesに自作websiteをuploadするまで">M1 MacでJekyll環境を設定からGitHub Pagesに自作websiteをuploadするまで</h1>

<p>ここでは上述の通り、まずはM1 MacにJekyll環境を構築します。そのローカル環境でwebsiteが正しく作られていることを確認したのち、GitHub Pagesにそれをアップロードする方法までをメモしておきます。私の環境は以下の通りです。</p>

<ul>
  <li>OS: macOS Big Sur, Ver. 11.6</li>
  <li>Chip: Apple M1</li>
  <li>Shell: Zsh</li>
  <li>インストールされたJekyll: 4.2.1</li>
</ul>

<h2 id="jekyll環境構築">Jekyll環境構築</h2>

<h3 id="xcodeのインストール">Xcodeのインストール</h3>

<p>まずは自分のMacに<a href="https://developer.apple.com/xcode/">Xcode</a>をインストールしましょう。App Storeでダウンロードしても大丈夫ですが、ここで必要となるのはコマンドラインツールです。以下のようにしてインストールすることができます。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% xcode-select <span class="nt">--install</span>
</code></pre></div></div>

<h3 id="homebrewのインストール">Homebrewのインストール</h3>

<p>次に必要となるのは<a href="https://brew.sh/">Homebrew</a>です。Homebrewのwebsiteの手順通り、コマンドでインストールを行います。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% /bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="ruby-rbenvのインストール">Ruby, Rbenvのインストール</h3>

<p>先程インストールしたHomebrewを用いてRubyと<code class="language-plaintext highlighter-rouge">rbenv</code>をインストールします。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% brew <span class="nb">install </span>rbenv ruby-build
</code></pre></div></div>

<p>ターミナルを開いたときにいつでもrbenvが使えるように、<code class="language-plaintext highlighter-rouge">.zshrc</code>に以下の文を加筆しましょう。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span>which rbenv <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then </span><span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init -<span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="k">fi</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.zshrc</code>の変更を反映させます。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% <span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<p>続いて、このrbenvを用いて<code class="language-plaintext highlighter-rouge">Ruby 3.0.0</code>をインストールします。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% rbenv <span class="nb">install </span>3.0.0
% rbenv global 3.0.0
% ruby <span class="nt">-v</span>
<span class="c"># ruby 3.0.0などが表示されればOK</span>
% rbenv rehash
</code></pre></div></div>

<p>Rubyとgemsのパスを通します。そのためには<code class="language-plaintext highlighter-rouge">.zshrc</code>に以下の文を加筆します。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/3.0.0/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>先程と同様に<code class="language-plaintext highlighter-rouge">source</code>コマンドでこの変更を反映させましょう。もしパスが通っているか確認したければ<code class="language-plaintext highlighter-rouge">% echo $SHELL</code>などで確認することができます。</p>

<h3 id="jekyllのインストール">Jekyllのインストール</h3>

<p>それでは<a href="http://jekyllrb-ja.github.io/">Jekyll</a>および<code class="language-plaintext highlighter-rouge">Bundler</code>をインストールしていきましょう。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% gem <span class="nb">install</span> <span class="nt">--user-install</span> bundler jekyll
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Jekyll</code>をどこからでも使えるように、以下の文を<code class="language-plaintext highlighter-rouge">.zshrc</code>に追加します。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gem/ruby/3.0.0/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CAUTION: もしRubyのバージョンが違う場合は、3.0.0の部分を該当するバージョンに変更します。
</code></pre></div></div>

<p>今しがた追加したパスが通っているかは、以下のコマンドを入力したときに表示される<code class="language-plaintext highlighter-rouge">GEM PATHS:</code>項目を見ることで確認することができます。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% gem <span class="nb">env</span>
</code></pre></div></div>

<p>これでJekyllが使えるようになりました。それではJekyllのクイックスタートを実行してみましょう。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% gem <span class="nb">install </span>bundler jekyll
% jekyll new good-looking-site
% <span class="nb">cd </span>good-looking-site
% bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>上の”good-looking-site”の部分は自分の好きなwebsiteプロジェクト名を入れます。しかしM1 Macを使用している場合、一番最後のコマンドでエラーとなるはずです。</p>

<h3 id="m1-macへの処方箋-jekyllの修正">M1 Macへの処方箋: Jekyllの修正</h3>

<p>ここで起きたエラーを解消するには<code class="language-plaintext highlighter-rouge">webrick</code>なるものを自分たちのプロジェクトに加えます。念のために<code class="language-plaintext highlighter-rouge">bundle</code>をアップデートして臨みましょう。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% bundle update <span class="nt">--bundler</span>
% bundle add webrick
% bundle <span class="nb">install</span> <span class="nt">--redonwload</span>
</code></pre></div></div>

<p>最後のコマンドは全て再構築することを確実に行うために実行します。もしエラーが出るようであれば成功するまで何度か実行します。
そして</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>を行うと、ローカルでサーバーが立ち上がります。この状態で<code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000</code>などにアクセスすると、たった今Jekyllによって作成されたwebsiteを見ることができるはずです。　　</p>

<p>もしこれで上手くいかない場合には、以下の手順を全て順番通りに実行すると良いでしょう。</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% gem uninstall sassc
% gem <span class="nb">install </span>sassc <span class="nt">--</span> <span class="nt">--disable-march-tune-native</span>
% gem uninstall ffi
% gem <span class="nb">install </span>ffi
% bundle update <span class="nt">--bundler</span>
% bundle add webrick
% bundle <span class="nb">install</span> <span class="nt">--redownload</span>
% bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9131160172347693" crossorigin="anonymous"></script>

<!-- for_jekyll -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9131160172347693" data-ad-slot="3528582902" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="github-pagesにアップロードする">GitHub Pagesにアップロードする</h2>

<p>以下の文章は<a href="http://jekyllrb-ja.github.io/docs/continuous-integration/github-actions/">Jekyllの日本語公式website</a>に書かれたものに則って書かれています。しかし自分のつまづきポイントなども加えたオリジナル文章であるため、間違いもあるかもしれません。ご容赦ください。</p>

<h3 id="_configyml">_config.yml</h3>

<p>特に気をつけるところは、<code class="language-plaintext highlighter-rouge">GitHub Pages</code>に対応するために<code class="language-plaintext highlighter-rouge">remote theme</code>を設定することです。私がこのwebsiteに用いている<code class="language-plaintext highlighter-rouge">Just the Docs</code>というテーマプラグインでは、以下の一行を<code class="language-plaintext highlighter-rouge">_config.yml</code>に加筆します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">remote_theme</span><span class="pi">:</span> <span class="s">pmarsceill/just-the-docs</span>
</code></pre></div></div>

<p>コロン以降の部分には(テーマプラグインのオーナー)/(プラグイン名)のような書式で書きます。もしこの設定を忘れると、GitHub Pagesにアップロードしたときに、GitHubに登録されているメールアドレス宛に以下のようなメールが送信されます。</p>

<p><a href="/assets/images/pro/jekyll_01.png">GitHubから送信されたメール</a></p>

<h3 id="actionのセットアップ">Actionのセットアップ</h3>

<p>Jekyllで作成したwebsiteをGitHub Pagesで表示するには、<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を用います。<code class="language-plaintext highlighter-rouge">Jekyll 3.9.0</code>であれば<code class="language-plaintext highlighter-rouge">Gemfile</code>内に2行ほど追加するだけで、GitHub Pages環境のための準びが調います。しかし最新のJekyllではこれに対応しておらず、<code class="language-plaintext highlighter-rouge">GitHub Actions</code>を用いた対応をする必要があります。<br />
そのためには<code class="language-plaintext highlighter-rouge">_config.yml</code>と同じ場所に<code class="language-plaintext highlighter-rouge">.github/workflows</code>というディレクトリを作成し、その中に<code class="language-plaintext highlighter-rouge">github-pages.yml</code>というファイルを作成しましょう。ここには<code class="language-plaintext highlighter-rouge">GitHub Actions</code>が実際にGitHub上で行うワークフローを記述しておきます。私は以下のようにしました。</p>

<pre><code class="language-.github/workflows/github-pages.yml">
</code></pre>

<h1 id="参考リンク">参考リンク</h1>

<ul>
  <li>[1] <a href="https://colingallagher.me/webdev/2021/04/15/installing-jekyll-apple-m1-mac/">Installing Jekyll on an Apple M1 Mac</a></li>
  <li>[2] <a href="https://github.com/jekyll/jekyll/issues/8576#issuecomment-798080994">Can’t install Jekyll on Mac OS Big Sur (Apple Silicon M1)</a></li>
  <li>[3] <a href="http://jekyllrb-ja.github.io/docs/continuous-integration/github-actions/">Jekyll, GitHub Actions</a></li>
</ul>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9131160172347693" crossorigin="anonymous"></script>

<!-- for_jekyll -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9131160172347693" data-ad-slot="3528582902" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

:ET